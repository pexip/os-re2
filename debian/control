Source: re2
Section: libs
Priority: optional
Maintainer: Pexip AS <packaging@pexip.com>
XSBC-Pexip-Original-Maintainer: Stefano Rivera <stefanor@debian.org>
Build-Depends:
 debhelper-compat (= 13),
 dpkg-dev (>= 1.16~),
 g++ (>= 4:5),
 python3,
 python3-six,
 unicode-data
Standards-Version: 4.6.0
Homepage: https://github.com/google/re2
Vcs-Git: https://salsa.debian.org/debian/re2.git
Vcs-Browser: https://salsa.debian.org/debian/re2
Rules-Requires-Root: no
XS-Pexip-Upstream: http://ftp.debian.org/debian/ bookworm

Package: libre2-9
Architecture: any
Multi-Arch: same
Breaks: libre2-dev (<< 20131024+dfsg-1~)
Replaces: libre2-dev (<< 20131024+dfsg-1~)
Depends: ${misc:Depends}, ${shlibs:Depends}
Built-Using: ${Built-Using}
Description: efficient, principled regular expression library
 RE2 is a fast, safe, thread-friendly alternative to backtracking regular
 expression engines like those used in PCRE, Perl, and Python. It is a C++
 library.
 .
 RE2 uses automata theory to guarantee that regular expression searches run in
 time linear in the size of the input. RE2 implements memory limits, so that
 searches can be constrained to a fixed amount of memory. RE2 is engineered to
 use a small fixed C++ stack footprint no matter what inputs or regular
 expressions it must process; thus RE2 is useful in multithreaded environments
 where thread stacks cannot grow arbitrarily large.
 .
 On large inputs, RE2 is often much faster than backtracking engines; its use
 of automata theory lets it apply optimizations that the others cannot.

Package: libre2-dev
Section: libdevel
Architecture: any
Multi-Arch: same
Breaks: libre2-0 (<< 0+hg40+dfsg-1~)
Replaces: libre2-0 (<< 0+hg40+dfsg-1~)
Depends: libre2-9 (= ${binary:Version}), ${misc:Depends}
Built-Using: ${Built-Using}
Description: efficient, principled regular expression library, development kit
 RE2 is a fast, safe, thread-friendly alternative to backtracking regular
 expression engines like those used in PCRE, Perl, and Python. It is a C++
 library.
 .
 RE2 uses automata theory to guarantee that regular expression searches run in
 time linear in the size of the input. RE2 implements memory limits, so that
 searches can be constrained to a fixed amount of memory. RE2 is engineered to
 use a small fixed C++ stack footprint no matter what inputs or regular
 expressions it must process; thus RE2 is useful in multithreaded environments
 where thread stacks cannot grow arbitrarily large.
 .
 On large inputs, RE2 is often much faster than backtracking engines; its use
 of automata theory lets it apply optimizations that the others cannot.
 .
 This package contains the static library and header files used in development.
